'use client'
import { QuestionModalContent } from "@/shared/question-modal-content/QuestionModalContent";
import { SttingsModalContent } from "@/shared/sttings-modal-content/SttingsModalContent";
import { useAppSelector } from "@/views/store";
import { useState } from "react";

export const ChatHeader = () => {
  const generationPoints = useAppSelector(state => state.main.accountData.generationPoints)
  const { isCreatingImage } = useAppSelector(state => state.main.meta)
  const [isOpenSettings, setIsOpenSettings] = useState(false)
  const [isOpenQuestionModalContent, setIsOpenQuestionModalContent] = useState(false)

  return (
    <div className="w-full">
      <SttingsModalContent isOpen={isOpenSettings} setIsOpen={setIsOpenSettings} />
      <QuestionModalContent isOpen={isOpenQuestionModalContent} setIsOpen={setIsOpenQuestionModalContent} />
      <div className="relative z-[10] flex items-center justify-between w-full">
        <button onClick={() => setIsOpenQuestionModalContent(true)} className="active:scale-[0.95] transition-all">
          <svg className="w-26px h-26px" width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
            <g clipPath="url(#clip0_930_2333)">
            <path d="M12.8005 24.0659C18.9122 24.0659 23.8667 19.1114 23.8667 12.9998C23.8667 6.88808 18.9122 1.93359 12.8005 1.93359C6.68886 1.93359 1.73438 6.88808 1.73438 12.9998C1.73438 19.1114 6.68886 24.0659 12.8005 24.0659Z" stroke="white" strokeWidth="1.57054"/>
            <path d="M12.7817 8.32178C13.6753 8.32178 14.3894 8.56709 14.9238 9.05771C15.467 9.54833 15.7386 10.2186 15.7386 11.0684C15.7386 11.9533 15.4582 12.6191 14.8975 13.0659C14.3368 13.5127 13.5921 13.7361 12.6634 13.7361L12.6109 14.7743H11.3098L11.2441 12.7111H11.6778C12.5276 12.7111 13.176 12.5972 13.6228 12.3694C14.0783 12.1416 14.3061 11.7079 14.3061 11.0684C14.3061 10.604 14.1703 10.2405 13.8987 9.97763C13.6359 9.71479 13.2679 9.58338 12.7948 9.58338C12.3217 9.58338 11.9494 9.71041 11.6778 9.96448C11.4062 10.2186 11.2704 10.5734 11.2704 11.029H9.86426C9.86426 10.5033 9.98253 10.0346 10.2191 9.6228C10.4556 9.21103 10.7929 8.89125 11.231 8.66346C11.6778 8.43567 12.1947 8.32178 12.7817 8.32178ZM11.9406 17.6786C11.669 17.6786 11.4413 17.5866 11.2573 17.4027C11.0733 17.2187 10.9813 16.9909 10.9813 16.7193C10.9813 16.4477 11.0733 16.2199 11.2573 16.0359C11.4413 15.8519 11.669 15.76 11.9406 15.76C12.2035 15.76 12.4269 15.8519 12.6109 16.0359C12.7948 16.2199 12.8868 16.4477 12.8868 16.7193C12.8868 16.9909 12.7948 17.2187 12.6109 17.4027C12.4269 17.5866 12.2035 17.6786 11.9406 17.6786Z" fill="white"/>
            </g>
            <defs>
            <clipPath id="clip0_930_2333">
            <rect width="24.6973" height="24.6973" fill="white" transform="translate(0.453125 0.651367)"/>
            </clipPath>
            </defs>
          </svg>
        </button>
        <div className="backdrop-blur-[12px] w-68px h-32px flex items-center justify-center fs-13 font-medium bg-[#F7F7F833] rounded-[20px]">
          {generationPoints}
        </div>
        <button onClick={() => setIsOpenSettings(true)} className={`active:scale-[0.95] transition-all ${isCreatingImage ? 'pointer-events-none opacity-60': ''}`}>
          <svg className="w-26px h-26px" width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12.801 16.0869C14.506 16.0869 15.8882 14.7047 15.8882 12.9998C15.8882 11.2948 14.506 9.9126 12.801 9.9126C11.096 9.9126 9.71387 11.2948 9.71387 12.9998C9.71387 14.7047 11.096 16.0869 12.801 16.0869Z" stroke="white" strokeWidth="1.57054"/>
            <path d="M4.2207 11.5997C4.70698 11.9052 5.01986 12.4257 5.01986 12.9999C5.01985 13.5742 4.70697 14.0947 4.2207 14.4002C3.8898 14.6081 3.6766 14.7743 3.52492 14.972C3.19263 15.4051 3.04598 15.9524 3.11723 16.4935C3.17066 16.8994 3.41039 17.3146 3.88987 18.1452C4.36936 18.9756 4.6091 19.3908 4.93388 19.6401C5.36692 19.9723 5.91423 20.119 6.45541 20.0478C6.70242 20.0153 6.9529 19.9137 7.29833 19.7311C7.80615 19.4628 8.41343 19.4521 8.91084 19.7393C9.40821 20.0265 9.70251 20.5577 9.72397 21.1316C9.73858 21.5221 9.7759 21.7899 9.87125 22.0201C10.0801 22.5243 10.4808 22.925 10.9851 23.1339C11.3633 23.2905 11.8428 23.2905 12.8017 23.2905C13.7607 23.2905 14.2402 23.2905 14.6184 23.1339C15.1227 22.925 15.5234 22.5243 15.7323 22.0201C15.8276 21.7899 15.8649 21.5221 15.8795 21.1317C15.9009 20.5577 16.1953 20.0265 16.6927 19.7393C17.19 19.4522 17.7973 19.4629 18.305 19.7312C18.6506 19.9138 18.901 20.0154 19.148 20.0479C19.6892 20.1192 20.2365 19.9724 20.6696 19.6402C20.9943 19.391 21.2341 18.9757 21.7136 18.1453C21.9271 17.7755 22.0931 17.4881 22.2161 17.2471M21.3827 14.4003C20.8965 14.0948 20.5836 13.5743 20.5835 13.0001C20.5835 12.4258 20.8965 11.9052 21.3827 11.5997C21.7136 11.3918 21.9268 11.2256 22.0784 11.0279C22.4107 10.5949 22.5574 10.0476 22.4862 9.50639C22.4328 9.10051 22.193 8.68526 21.7134 7.85479C21.234 7.0243 20.9942 6.60907 20.6695 6.35985C20.2364 6.02756 19.6891 5.88091 19.1479 5.95215C18.9009 5.98468 18.6505 6.08621 18.305 6.26879C17.7972 6.53718 17.1899 6.54788 16.6926 6.26069C16.1953 5.97353 15.9009 5.44233 15.8795 4.86846C15.8649 4.47792 15.8276 4.21019 15.7323 3.97997C15.5234 3.47568 15.1227 3.07502 14.6184 2.86614C14.2402 2.70947 13.7607 2.70947 12.8017 2.70947C11.8428 2.70947 11.3633 2.70947 10.9851 2.86614C10.4808 3.07502 10.0801 3.47568 9.87125 3.97997C9.7759 4.21017 9.73858 4.47788 9.72397 4.86836C9.7025 5.44229 9.40819 5.97354 8.9108 6.26069C8.41342 6.54786 7.80619 6.53713 7.29842 6.26876C6.95295 6.08616 6.70245 5.98463 6.45542 5.9521C5.91424 5.88086 5.36693 6.02751 4.93389 6.3598C4.60911 6.60902 4.36937 7.02426 3.88988 7.85474C3.67642 8.22446 3.51048 8.51188 3.38733 8.75282" stroke="white" strokeWidth="1.57054" strokeLinecap="round"/>
          </svg>
        </button>
      </div>
    </div>
  );
};